version: 2.1

executors:
  docker-docker:
    docker:
      - image: cimg/base:2024.01
    resource_class: small

  docker-machine:
    machine:
      image: ubuntu-2204:2024.01.1
    resource_class: large

parameters:
  build-and-push:
    type: boolean
    default: false
  run-all:
    type: boolean
    default: false

commands:
  setup-qemu-amd64:
    steps:
      - run:
          name: Setup Qemu
          command: |
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - run:
          name: Create builder
          command: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            docker context create multi-arch-build
            docker buildx create --use multi-arch-build
  setup-qemu-arm64:
    steps:
      - run:
          name: Setup Qemu
          command: |
            docker run --rm --privileged hectorm/qemu-user-static --reset -p yes
      - run:
          name: Create builder
          command: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            docker context create multi-arch-build
            docker buildx create --use multi-arch-build
  login-docker:
    steps:
      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin

jobs:
   amd64:
    executor: docker-machine
    environment:
      IMAGE_REPO: igorferreir4/registrator
      IMAGE_TAGS: 1.0.1-alpine3.19-amd64
      IMAGE_ARCHS: linux/amd64 #,linux/arm64/v8 #,linux/arm/v6,linux/arm/v7
      CACHE_REPO: igorferreir4/buildcaches
      CACHE_NAME: registrator-1.0.1-alpine3.19-amd64
    working_directory: ~/project/containers/registrator/1.0.1/alpine3.19
    steps:
      - checkout:
          path: ~/project
      - setup-qemu-amd64
      - login-docker
      - run:
          name: Build multiarch docker image and push
          command: |
            DOCKER_CLI_EXPERIMENTAL=enabled
            BUILDX_ARGS=""
            for tag in $(echo $IMAGE_TAGS | tr "," " "); do
              BUILDX_ARGS="$BUILDX_ARGS -t $IMAGE_REPO:$tag"
            done
            docker buildx build \
            --cache-from=type=registry,ref=$CACHE_REPO:$CACHE_NAME \
            --cache-to=type=registry,ref=$CACHE_REPO:$CACHE_NAME,mode=max \
            --push --platform $IMAGE_ARCHS $BUILDX_ARGS .

   arm64:
    executor: docker-machine
    resource_class: arm.large
    environment:
      IMAGE_REPO: igorferreir4/registrator
      IMAGE_TAGS: 1.0.1-alpine3.19-arm64
      IMAGE_ARCHS: linux/arm64/v8
      CACHE_REPO: igorferreir4/buildcaches
      CACHE_NAME: registrator-1.0.1-alpine3.19-arm64
    working_directory: ~/project/containers/registrator/1.0.1/alpine3.19
    steps:
      - checkout:
          path: ~/project
      - setup-qemu-arm64
      - login-docker
      - run:
          name: Build multiarch docker image and push
          command: |
            DOCKER_CLI_EXPERIMENTAL=enabled
            BUILDX_ARGS=""
            for tag in $(echo $IMAGE_TAGS | tr "," " "); do
              BUILDX_ARGS="$BUILDX_ARGS -t $IMAGE_REPO:$tag"
            done
            docker buildx build \
            --cache-from=type=registry,ref=$CACHE_REPO:$CACHE_NAME \
            --cache-to=type=registry,ref=$CACHE_REPO:$CACHE_NAME,mode=max \
            --push --platform $IMAGE_ARCHS $BUILDX_ARGS .
      # - run:
      #     name: Build multiarch docker image and push
      #     command: |
      #       # Build da imagem com cache e tags
      #       docker build --cache-from $IMAGE_REPO:$IMAGE_TAGS -t $IMAGE_REPO:$IMAGE_TAGS .
      #       # Exportar o cache da imagem base para o Docker Hub
      #       docker push $IMAGE_REPO:$IMAGE_TAGS
      # - run:
      #     name: Build multiarch docker image and push
      #     command: |
      #       # Build da imagem com cache e tags
      #       docker build --cache-from $CACHE_REPO:$CACHE_TAG -t $IMAGE_REPO:$IMAGE_TAGS .
      #       # Exportar o cache da imagem base para o Docker Hub
      #       docker save $IMAGE_REPO:$IMAGE_TAGS | docker push $CACHE_REPO:$CACHE_TAG
      #       # Exportar a imagem final para o Docker Hub
      #       docker save $IMAGE_REPO:$IMAGE_TAGS | docker push $IMAGE_REPO:$IMAGE_TAGS

   servidor:
    executor: docker-docker
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:hLlCCj1OZj3pbBbgrGvfHjdTf20F4IYKyKvyJTMXC/A"
      - run:
          name: Add Pub Key
          command: |
            mkdir -p ~/.ssh
            echo "${OCI_PUB_KEY}" >> ~/.ssh/known_hosts
      - run:
          name: Teste SSH depois da Build
          command: |
            ssh $SSH_USER@$SSH_HOST_IGOR_ARM "echo "teste CIRCLECI 17" >> /home/$SSH_USER/circleci.txt"

workflows:
   registrator-1-0-1-alpine3-19:
    when: 
      or: 
        - << pipeline.parameters.build-and-push >>
        - << pipeline.parameters.run-all >>
    jobs:
      - amd64
      - arm64
      - servidor:
          requires:
            - amd64
            - arm64