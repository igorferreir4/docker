version: 2.1

executors:
  docker-docker:
    docker:
      - image: cimg/base:current
    resource_class: small
    
  docker-machine:
    machine:
      image: ubuntu-2204:current
    resource_class: large

parameters:
  build-and-push:
    type: boolean
    default: false
  run-all:
    type: boolean
    default: false

commands:
  setup-qemu:
    steps:
      - run:
          name: Setup Qemu
          command: |
            docker run --privileged --rm tonistiigi/binfmt --install all
      - run:
          name: Create builder
          command: |
            docker buildx create --name multi-arch-build --bootstrap --use
      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin

jobs:
   build-amd64:
    executor: docker-machine
    environment:
      IMAGE_REPO: igorferreir4/registrator
      IMAGE_TAG: 1.0.1-alpine3.19-amd64
      IMAGE_ARCH: linux/amd64,linux/arm64/v8 #,linux/arm/v6,linux/arm/v7
      CACHE_REPO: igorferreir4/buildcaches
      CACHE_NAME: registrator-1.0.1-alpine3.19-amd64
    working_directory: ~/project/containers/registrator/1.0.1/alpine3.19
    steps:
      - checkout:
          path: ~/project
      - setup-qemu
      - run:
          name: Build docker image
          command: |
              DOCKER_CLI_EXPERIMENTAL=enabled
              BUILDX_ARGS=""
              for tag in $(echo $IMAGE_TAG | tr "," " "); do
                  BUILDX_ARGS="$BUILDX_ARGS -t $IMAGE_REPO:$IMAGE_TAG"
              done
              docker buildx build \
                  --cache-from=type=registry,ref=$CACHE_REPO:$CACHE_NAME \
                  --cache-from=type=registry,ref=$IMAGE_REPO:$IMAGE_TAG \
                  --platform $IMAGE_ARCH $BUILDX_ARGS .
      - run:
          name: Test application
          command: |
            chmod +x ./teste.sh && ./teste.sh >> resultado.txt 2>&1
      - store_artifacts:
          path: resultado.txt
          destination: resultado-amd64
      # - run:
      #     name: Test the image
      #     command: |
      #       docker compose -f docker-compose.amd64 up -d consul-server
      #       sleep 10
      #       docker compose -f docker-compose.amd64 up -d registrator
      #       sleep 10
      #       docker logs consul-server
      #       echo "-----------------------------------------------------------"
      #       docker logs registrator >> ./logs-registrator.txt 2>&1
      #       cat ./logs-registrator.txt
      #       echo "-----------------------------------------------------------"
      #       awk '/Syncing services on/ { found=1; print "EXPRESSÃO ENCONTRADA!"; exit } END { if (!found) { print "ERRO, EXPRESSÃO NÃO ENCONTRADA!"; exit 1 } }' ./logs-registrator.txt
      - run:
          name: Upload cache and image
          when: on_success
          command: |
              DOCKER_CLI_EXPERIMENTAL=enabled
              BUILDX_ARGS=""
              for tag in $(echo $IMAGE_TAG | tr "," " "); do
                  BUILDX_ARGS="$BUILDX_ARGS -t $IMAGE_REPO:$IMAGE_TAG"
              done
              docker buildx build \
                  --cache-to=type=registry,ref=$CACHE_REPO:$CACHE_NAME,mode=max \
                  --push --platform $IMAGE_ARCH $BUILDX_ARGS .

  #  build-arm64:
  #   executor: docker-machine
  #   resource_class: arm.large
  #   environment:
  #     IMAGE_REPO: igorferreir4/registrator
  #     IMAGE_TAG: 1.0.1-alpine3.19-arm64
  #     IMAGE_ARCH: linux/arm64/v8
  #     CACHE_REPO: igorferreir4/buildcaches
  #     CACHE_NAME: registrator-1.0.1-alpine3.19-arm64
  #   working_directory: ~/project/containers/registrator/1.0.1/alpine3.19
  #   steps:
  #     - checkout:
  #         path: ~/project
  #     - setup-qemu
  #     - run:
  #         name: Build docker image
  #         command: |
  #             DOCKER_CLI_EXPERIMENTAL=enabled
  #             BUILDX_ARGS=""
  #             for tag in $(echo $IMAGE_TAG | tr "," " "); do
  #                 BUILDX_ARGS="$BUILDX_ARGS -t $IMAGE_REPO:$IMAGE_TAG"
  #             done
  #             docker buildx build \
  #                 --cache-from=type=registry,ref=$CACHE_REPO:$CACHE_NAME \
  #                 --cache-from=type=registry,ref=$IMAGE_REPO:$IMAGE_TAG \
  #                 --platform $IMAGE_ARCH $BUILDX_ARGS .
  #     - run:
  #         name: Test application
  #         command: |
  #           chmod +x ./teste.sh && ./teste.sh >> resultado.txt 2>&1
  #     - store_artifacts:
  #         path: resultado.txt
  #         destination: resultado-arm64                 
  #     # - run:
  #     #     name: Test the image
  #     #     command: |
  #     #       docker compose -f docker-compose.arm64 up -d consul-server
  #     #       sleep 10
  #     #       docker compose -f docker-compose.arm64 up -d registrator
  #     #       sleep 10
  #     #       docker logs consul-server
  #     #       echo "-----------------------------------------------------------"
  #     #       docker logs registrator >> ./logs-registrator.txt 2>&1
  #     #       cat ./logs-registrator.txt
  #     #       echo "-----------------------------------------------------------"
  #     #       awk '/Syncing services on/ { found=1; print "EXPRESSÃO ENCONTRADA!"; exit } END { if (!found) { print "ERRO, EXPRESSÃO NÃO ENCONTRADA!"; exit 1 } }' ./logs-registrator.txt
  #     - run:
  #         name: Upload cache and image
  #         when: on_success
  #         command: |
  #             DOCKER_CLI_EXPERIMENTAL=enabled
  #             BUILDX_ARGS=""
  #             for tag in $(echo $IMAGE_TAG | tr "," " "); do
  #                 BUILDX_ARGS="$BUILDX_ARGS -t $IMAGE_REPO:$IMAGE_TAG"
  #             done
  #             docker buildx build \
  #                 --cache-to=type=registry,ref=$CACHE_REPO:$CACHE_NAME,mode=max \
  #                 --push --platform $IMAGE_ARCH $BUILDX_ARGS .

   deploy:
    executor: docker-docker #docker-machine
    #resource_class: medium
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:hLlCCj1OZj3pbBbgrGvfHjdTf20F4IYKyKvyJTMXC/A"
      - run:
          name: Teste SSH depois da Build
          command: |
            ssh-keyscan $SSH_HOST_IGOR_ARM >> ~/.ssh/known_hosts
            ssh $SSH_USER@$SSH_HOST_IGOR_ARM "echo Executado em "$(date +"%d/%m/%G - %Hh:%Mm:%Ss") - amd64" >> circleci.txt" >> ~/circleci.txt
      # - run:
      #     name: Teste SSH depois da Build
      #     command: |
      #       ssh $SSH_USER@$SSH_HOST_IGOR_ARM "~/50GB/docker/executar-docker-compose-up-d.sh >> ~/circleci.txt 2>&1"

workflows:
   registrator-v1.0.1-alpine3.19:
    when: 
      or: 
        - << pipeline.parameters.build-and-push >>
        - << pipeline.parameters.run-all >>
    jobs:
      - build-amd64
      # - build-arm64
      - deploy:
          requires:
            - build-amd64
            # - build-arm64